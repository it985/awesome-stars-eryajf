🤩 我的star列表，0,8,16自动更新 🤩
<div>
<img src="https://camo.githubusercontent.com/82291b0fe831bfc6781e07fc5090cbd0a8b912bb8b8d4fec0696c881834f81ac/68747470733a2f2f70726f626f742e6d656469612f394575424971676170492e676966" width="800"  height="3">
</div><br>

## Table of Contents

<% 
// 将所有仓库按语言存储到一个数组中
const languageEntries = Array.from(stars);
const languageRepositories = new Map();

// 初始化语言和仓库数据
languageEntries.forEach(([language, repositories]) => {
  const sortedRepositories = repositories.slice().sort((a, b) => b.stargazers_count - a.stargazers_count);
  languageRepositories.set(language, sortedRepositories);
});

// 扁平化并全局排序所有仓库
const allRepositories = [];
languageRepositories.forEach((repositories, language) => {
  allRepositories.push(...repositories.map(repo => ({ ...repo, language })));
});
const sortedAllRepositories = allRepositories.sort((a, b) => b.stargazers_count - a.stargazers_count);

// 用于存储最终结果
const result = [];
const languageCache = new Map();
let start = 0;

// 将排序后的仓库分组
while (start < sortedAllRepositories.length) {
  let end = start + 100;
  const topRepositories = sortedAllRepositories.slice(start, end);

  if (topRepositories.length > 0) {
    const languageCounts = new Map();

    topRepositories.forEach(repo => {
      if (languageCounts.has(repo.language)) {
        languageCounts.set(repo.language, languageCounts.get(repo.language) + 1);
      } else {
        languageCounts.set(repo.language, 1);
      }
    });

    languageCounts.forEach((count, language) => {
      const languageRepos = topRepositories.filter(repo => repo.language === language);
      result.push({ language, repositories: languageRepos });
    });
  }

  start += 100;
}
%>

<% result.forEach(({ language, repositories }) => { %>
## <%= language %>
  <% repositories.forEach(repo => { %>
- [<%= repo.full_name %>](<%= repo.html_url %>) - <%= repo.description ? repo.description.slice(0, 50) : '' %>
  <% }); %>
<% }); %>

