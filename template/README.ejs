<% 
const fs = require('fs');
const path = require('path');

// 文件存储路径
const outputDir = 'docs';

// 清空 docs 目录中的所有文件
if (fs.existsSync(outputDir)) {
  fs.readdirSync(outputDir).forEach(file => {
    const filePath = path.join(outputDir, file);
    fs.unlinkSync(filePath); // 删除文件
  });
} else {
  fs.mkdirSync(outputDir); // 如果目录不存在，创建目录
}

// 存储 README 内容
let readmeContent = `🤩 我的star列表，0,8,16自动更新 🤩
<div>
<img src="https://camo.githubusercontent.com/82291b0fe831bfc6781e07fc5090cbd0a8b912bb8b8d4fec0696c881834f81ac/68747470733a2f2f70726f626f742e6d656469612f394575424971676170492e676966" width="800" height="3">
</div><br>

## Table of Contents\n`;

// 将所有仓库按语言存储到一个数组中
const languageEntries = Array.from(stars);
const languageRepositories = new Map();

// 初始化语言和仓库数据
languageEntries.forEach(([language, repositories]) => {
  const sortedRepositories = repositories.slice().sort((a, b) => b.stargazers_count - a.stargazers_count);
  languageRepositories.set(language, sortedRepositories);
});

// 遍历每种语言并生成文件和 README 内容
languageRepositories.forEach((repositories, language) => {
  // 生成语言文件
  const fileName = `${language.replace(/\s+/g, '-').toLowerCase()}.md`;
  const filePath = path.join(outputDir, fileName);
  const fileContent = [
    `## ${language}`,
    ...repositories.map(repo => `- [${repo.full_name}](${repo.html_url}) - ${repo.description || ''}`)
  ].join('\n');

  fs.writeFileSync(filePath, fileContent, 'utf8');

  // 更新 README 内容
  readmeContent += `- [${language}](docs/${fileName})\n`;
});

// 写入 README.md 文件
fs.writeFileSync('README.md', readmeContent, 'utf8');
%>
